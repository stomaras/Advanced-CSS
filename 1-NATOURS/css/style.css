/*
COLORS

Light green: #7ed567
Medium green: #55c57a
Dark green: #28b485

The best way to perform a basic reset using the universal sellector;

How to set project-wide fonts definitions

How to clip parts of elements using clip-path

*/

/* In order to do the browser rendering with the same way */

* {
    margin: 0rem;
    padding: 0rem;
    box-sizing: border-box;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}
/* header is the parent element of .logo-box so i set position to relative
*/
.header {
    height: 95vh;
    background-image:linear-gradient(
        to right bottom,
         rgb(36, 235, 102),
         rgba(55, 97, 72, 0.8)), 
    url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    position: relative;

    clip-path: polygon(0 0, 100% 0, 100% 80%, 0 100%);
}

/* Measurement of logo-box start from parent element which has its position set to relative */

/* I display both heading-primary as block level elements and create line breaks after and before them */

/* transform: translate(-50%, -50%) ... this means 50% are now no longer from the parent but for the element itself*/
.logo-box{
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    height: 35px;
}

.logo:hover {
    animation: moveInRight 1s ease-out; /* i can use the animation multiple times in many places in the page */
}

.text-box {
    position: absolute;
    top: 50%; /* In relation to the parent element */
    left: 50%; /* In relation to the parent element */
    transform: translate(-50%, -50%); /* In relation to the element intself */
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    backface-visibility: hidden; /* backface-visibility property determines if the back part of the element when we transform it is visible or hidden for the user  */

}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;

    /* these are the only properties that required for the animation to work */
    animation-name: moveInLeft; /* Name of the animation property */
    animation-duration: 1s; /* Animation Duration property*/
    animation-timing-function: ease-out; /* The animation-timing-function CSS property specifies how a css animation should progress over the duration of each cycle */

    /* animation-iteration-count: 3;*/ /* How much time will take the animation */
    /* animation-delay: 3s; */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;
    animation: moveInRight 1s ease-out; /* instead of specyfing all of the above mentioned css properties we use animation and we can put all of these together and then CSS will figure out what means what*/

}

/*
    How to create CSS animations using the keyframes at rule and the animation property

    There are 2 types of animations in CSS the first one is to just use the transition property
    and then change the properties that you want to animate on an event like when we hover the element.
*/
/*
    I can specify what gonna happen in each moment of time of the animation.
    Browser optimized for 2 properties : 1st opacity and 2nd transform property.
*/
@keyframes moveInLeft {
    0% {
        opacity: 0; /* At the beggining of the animation opacity must be zero */
        transform: translateX(-100px); /* we want to animate in the x-direction   i put -100 because i want to be more in the left in the begining*/
    }

    60% {
        transform: rotate(180deg); /* Degree is a unit we use for rotations */
    }

    80% {
        transform: translateX(10px);
    }

    100% {
        opacity: 1; /* At the end the opacity must be one */
        transform: translate(0); /* Will look as in the beggining */
    }

}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }

    80% {
        transform: translateX(-10px);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }

}



